/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/chip-8.js":
/*!***********************!*\
  !*** ./src/chip-8.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Made with a loooot of help from this excellent resource: http://devernay.free.fr/hacks/chip8/C8TECH10.HTM\n/* harmony default export */ __webpack_exports__[\"default\"] = ((keyboard, sound) => {\n  const WORD_SIZE = 8\n\n  // It was originally designed to work on 4k computers, so lets give ourselves 4k of memory\n  // 0x0 -> 0x1FF is used to store the system font (it was originally used to store the interpreter data, back when it\n  // was ran on 4k systems)\n  // 0x200 -> 0xFFF is used to store the program data\n  let memory = new Uint8Array(4096)\n\n  // Copied from CowGood's font set\n  const fonts = [\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80 // F\n  ]\n\n  memory.set(fonts, 0)\n\n  let vRegisters = new Uint8Array(16) // It has 16 8-bit data registers. V[0xF] is the carry register.\n  let delayTimer = 0 // When the delay timer hits 0, it stays there.\n  let soundTimer = 0 // When the sound timer hits 0, it stays there, and a monotone sound is played.\n  let pc = 0x200 // And of course a (16-bit) program counter, starting at... 0x200 (where the program is loaded in!)\n  let iRegister = pc // It also has a 16-bit register, usually used for addressing memory\n  let sp = 0 // A stack pointer, allows us to have function calls.\n  let stack = new Array(16) // The stack. Documentation says it's 16 deep, but apparently only 10 are ever used?\n\n  // It utilises a 64x32 pixel display\n  const DISPLAY_WIDTH = 64\n  const DISPLAY_HEIGHT = 32\n  let display = new Array(DISPLAY_WIDTH).fill().map(_ => new Array(DISPLAY_HEIGHT).fill(0))\n  let drawFlag = true\n\n  function setMemory (file, start) {\n    memory.set(file, start)\n  }\n\n  function getDisplay () {\n    return display\n  }\n\n  function reset () {\n    memory = new Uint8Array(4096)\n    vRegisters = new Uint8Array(16)\n    memory.set(fonts, 0)\n    display = new Array(DISPLAY_WIDTH).fill().map(_ => new Array(DISPLAY_HEIGHT).fill(0))\n    pc = 0x200\n    stack = new Array(16)\n    drawFlag = true\n    delayTimer = 0\n    soundTimer = 0\n    iRegister = pc\n  }\n\n  // does a cpu cycle innit.\n  function cycle (delta) {\n    // decrement delayTimer at a rate of 60Hz\n    const timerRefreshRate = 1000 / 60\n    if (delta >= timerRefreshRate) {\n      if (delayTimer > 0) delayTimer -= 1\n\n      if (soundTimer > 0) {\n        soundTimer -= 1\n\n        if (soundTimer === 0) sound.play()\n      }\n    }\n\n    const inst = fetch()\n\n    // decode & execute (i'm too lazy to have them do separately, feels like a waste? We'll see...)\n    decodeAndExecute(inst)\n  }\n\n  // fetching from memory takes twoooo cycles, cos it's an 8-bit bus,\n  // but each instruction is 16-bits long.\n  function fetch () {\n    const inst = (memory[pc] << 8) | memory[pc + 1]\n    pc += 2\n\n    return inst\n  }\n\n  // aight we got a hex value now we need to look up what that means exactly\n  function decodeAndExecute (inst) {\n    // Many of the instructions follow the structure below, so to make my life simpler, I will calculate these values\n    // from the instruction We are using bitmasking to get these values. If you don't quite get what's happening here,\n    // look up https://en.wikipedia.org/wiki/Mask_(computing)\n\n    const nnn = inst & 0x0FFF // nnn or addr - A 12-bit value, the lowest 12 bits of the instruction\n    const n = inst & 0x000F // n or nibble - A 4-bit value, the lowest 4 bits of the instruction\n    const x = (inst & 0x0F00) >> 8 // x - A 4-bit value, the lower 4 bits of the high byte of the instructionction\n    const y = (inst & 0x00F0) >> 4// y - A 4-bit value, the upper 4 bits of the low byte of the instru\n    const kk = inst & 0x00FF // kk or byte - An 8-bit value, the lowest 8 bits of the instruction\n\n    // gonna split this into 'macro level opcodes' and 'micro level opcodes', as the instructions can be indexed by the\n    // highest byte first, and then after that we can decide what to do...\n    const highByte = inst & 0xF000\n    // We... could use a switch statement here, but that would be insane, right? How about a map instead?\n    const macroOpcodes = {\n      0x0000: clearAndReturnOpcodes,\n      0x1000: jump,\n      0x2000: callSubroutine,\n      0x3000: skipIfVxkk,\n      0x4000: skipIfNotVxkk,\n      0x5000: skipIfVxVy,\n      0x6000: loadVxVal,\n      0x7000: addVxVal,\n      0x8000: settingFuncs,\n      0x9000: skipIfNotVxVy,\n      0xA000: loadIAddr,\n      0xB000: jumpV0Offset,\n      0xC000: setVxRandom,\n      0xD000: draw,\n      0xE000: skipKey,\n      0xF000: registerManipulation\n    }\n\n    const macroOpcode = macroOpcodes[highByte]\n\n    macroOpcode({ nnn, n, x, y, kk }) // Yes, very ineffecient right now\n  }\n\n  // 0x0000\n  function clearAndReturnOpcodes (inst) {\n    // is the last bit set? if it is, it's the 'RET' function, otherwise it's the 'CLS' function\n    if (inst.nnn & 0x00F) {\n      returnFromSub() // 0x00EE\n    } else {\n      clearScreen() // 0x00E0\n    }\n\n    // 00E0 - CLS -> Clear the screen\n    function clearScreen () {\n      for (var x = 0; x < display.length; x += 1) {\n        for (var y = 0; y < display[x].length; y += 1) {\n          display[x][y] = 0\n        }\n      }\n    }\n\n    // 00EE - RET\n    // The interpreter sets the program counter to the address at the top of the stack, then subtracts 1 from the stack\n    // pointer. We're doing it the other way around (subtract, THEN set), because otherwise our 'stack's' (which is an\n    // array) first element is never set (stack[0] will never be used)\n    function returnFromSub () {\n      sp -= 1\n      pc = stack[sp]\n    }\n  }\n\n  // 1nnn - JP addr -> Sets pc to nnn\n  function jump (inst) {\n    pc = inst.nnn\n  }\n\n  // 2nnn - CALL addr\n  // Call subroutine at nnn.\n  // The interpreter increments the stack pointer, then puts the current PC on the top of the stack. The PC is then set\n  // to nnn. We're doing this the other way around (set, then increment), see 00EE for more info.\n  function callSubroutine (inst) {\n    stack[sp] = pc\n    sp += 1\n    pc = inst.nnn\n  }\n\n  // 3xkk - SE Vx, byte -> The interpreter compares register Vx to kk, and if they are equal, increments pc by 2.\n  function skipIfVxkk (inst) { // 5xy0 - SE Vx, Vy\n    if (vRegisters[inst.x] === inst.kk) {\n      pc += 2\n    }\n  }\n\n  // 4xkk - SNE Vx, byte\n  // Skip next instruction if Vx != kk.\n  // The interpreter compares register Vx to kk, and if they are not equal, increments the program counter by 2.\n  function skipIfNotVxkk (inst) {\n    if (vRegisters[inst.x] !== inst.kk) {\n      pc += 2\n    }\n  }\n\n  // 5xy0 - SE Vx, Vy\n  // Skip next instruction if Vx = Vy.\n  // The interpreter compares register Vx to register Vy, and if they are equal, increments the program counter by 2.\n  function skipIfVxVy (inst) {\n    if (vRegisters[inst.x] === vRegisters[inst.y]) {\n      pc += 2\n    }\n  }\n\n  // 6xkk - LD Vx, byte\n  // Set Vx = kk.\n  // The interpreter puts the value kk into register Vx.\n  function loadVxVal (inst) {\n    vRegisters[inst.x] = inst.kk\n  }\n\n  // 0x7000\n  // Set Vx = Vx + kk.\n  // Adds the value kk to the value of register Vx, then stores the result in Vx.\n  function addVxVal (inst) {\n    vRegisters[inst.x] = vRegisters[inst.x] + inst.kk\n  }\n\n  // 0x8000\n  function settingFuncs (inst) {\n    const microOpCodes = {\n      0x0: loadVxVy,\n      0x1: vXOrVy,\n      0x3: VxXorVy,\n      0x2: vXAndVy,\n      0x4: vXAddVy,\n      0x5: vXSubVy,\n      0x6: shiftRight,\n      0x7: vYSubVx,\n      0xE: shiftLeft\n    }\n\n    // 8xy0 - LD Vx, Vy -> Vx = Vy\n    function loadVxVy () {\n      vRegisters[inst.x] = vRegisters[inst.y]\n    }\n\n    // 8xy1 - OR Vx, Vy -> Vx = Vx | Vy\n    function vXOrVy () {\n      vRegisters[inst.x] = vRegisters[inst.x] | vRegisters[inst.y]\n    }\n\n    // 8xy2 - AND Vx, Vy -> Vx = Vx & Vy\n    function vXAndVy () {\n      vRegisters[inst.x] = vRegisters[inst.x] & vRegisters[inst.y]\n    }\n\n    // 8xy3 - XOR Vx, Vy -> Set Vx = Vx XOR Vy.\n    function VxXorVy () {\n      vRegisters[inst.x] = vRegisters[inst.x] ^ vRegisters[inst.y]\n    }\n\n    // 8xy4 - ADD Vx, Vy -> Vx = Vx + Vy -> Vx = Vx + Vy, set VF = carry.\n    function vXAddVy () {\n      const result = vRegisters[inst.x] + vRegisters[inst.y]\n\n      if (result > 0xFF) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = result & 0xFF\n    }\n\n    // 8xy5 - SUB Vx, Vy\n    // Set Vx = Vx - Vy, set VF = NOT borrow.\n    // If Vx > Vy, then VF is set to 1, otherwise 0. Then Vy is subtracted from Vx, and the results stored in Vx.\n    function vXSubVy () {\n      if (vRegisters[inst.x] > vRegisters[inst.y]) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = (vRegisters[inst.x] - vRegisters[inst.y]) & 0xFF\n    }\n\n    // 8xy6 - SHR Vx {, Vy} -> V[0xF] = Vx & 0x1. Set Vx = Vx >> 1\n    function shiftRight () {\n      vRegisters[0xF] = vRegisters[inst.x] & 0b1\n      vRegisters[inst.x] = vRegisters[inst.x] >> 1\n    }\n\n    // 8xy7 - SUBN Vx, Vy -> Set Vx = Vy - Vx, set VF = NOT borrow.\n    function vYSubVx () {\n      if (vRegisters[inst.y] > vRegisters[inst.x]) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = vRegisters[inst.y] - vRegisters[inst.x]\n    }\n\n    // 8xyE - SHL Vx {, Vy} -> V[0xF] = 1 if Vx >= 0x80, else 0. Then Vx = Vx << 1.\n    function shiftLeft () {\n      if (vRegisters[inst.x] & 0b10000000) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = vRegisters[inst.x] << 1\n    }\n\n    if (!microOpCodes[inst.n]) {\n      console.error(`Missing instruction: ${inst.n.toString(16)}`)\n    }\n\n    microOpCodes[inst.n]()\n  }\n\n  // 9xy0 - SNE Vx, Vy -> Skip next instruction if Vx != Vy.\n  function skipIfNotVxVy (inst) {\n    if (vRegisters[inst.x] !== vRegisters[inst.y]) {\n      pc += 2\n    }\n  }\n\n  // 0xA000 -> i = nnn\n  function loadIAddr (inst) {\n    iRegister = inst.nnn\n  }\n\n  // Bnnn - JP V0, addr -> pc = nnn + V0.\n  function jumpV0Offset (inst) {\n    pc = inst.nnn + vRegisters[0]\n  }\n\n  // Cxkk - RND Vx, byte -> Set Vx = random byte AND kk.\n  function setVxRandom (inst) {\n    const random = Math.floor(Math.random(1) * 255)\n    vRegisters[inst.x] = random & inst.kk\n  }\n\n  // Dxyn - DRW Vx, Vy, nibble\n  // Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision.\n  // The interpreter reads n bytes from memory, starting at the address stored in I.\n  // These bytes are then displayed as sprites on screen at coordinates (Vx, Vy).\n  // Sprites are XORed onto the existing screen.\n  // If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0.\n  // If the sprite is positioned so part of it is outside the coordinates of the display, i t wraps around to the\n  // opposite side of the screen.\n  function draw (inst) {\n    let x = vRegisters[inst.x]\n    let y = vRegisters[inst.y]\n    let iAddr = iRegister\n    vRegisters[0xF] = 0\n\n    for (var i = 0; i < inst.n; i += 1) {\n      const newY = (y + i) % DISPLAY_HEIGHT\n\n      const line = memory[iAddr]\n      iAddr += 1\n\n      for (var j = 0; j < WORD_SIZE; j += 1) {\n        const newX = (x + j) % DISPLAY_WIDTH\n\n        const bitmask = 0b00000001 << (WORD_SIZE - 1 - j)\n        const pixel = (line & bitmask) >> (WORD_SIZE - 1 - j)\n\n        const currentPixel = display[newX][newY]\n        const newPixel = currentPixel ^ pixel\n\n        display[newX][newY] = newPixel\n\n        if (currentPixel > newPixel) {\n          vRegisters[0xF] = 1\n        }\n      }\n    }\n\n    drawFlag = true\n  }\n\n  // 0xE000\n  function skipKey (inst) {\n    // Ex9E - SKP Vx -> Skip next instruction if key with the value of Vx is pressed.\n    if (inst.kk === 0x9E) {\n      const isKeyPressed = keyboard.get(vRegisters[inst.x])\n      if (isKeyPressed) {\n        pc += 2\n      }\n      return\n    }\n\n    // ExA1 - SKNP Vx\n    // Skip next instruction if key with the value of Vx is not pressed.\n    // Checks the keyboard, and if the key corresponding to the value of Vx is currently in the up position, PC is\n    // increased by 2.\n    if (inst.kk === 0xA1) {\n      const isKeyPressed = keyboard.get(vRegisters[inst.x])\n      if (!isKeyPressed) {\n        pc += 2\n      }\n    }\n  }\n\n  // 0xF000\n  function registerManipulation (inst) {\n    const microOpCodes = {\n      0x07: loadDelayTimer,\n      0x0A: waitForKeyPress,\n      0x15: setDelayTimer,\n      0x18: setSoundTimer,\n      0x1E: addIVx,\n      0x29: loadIVx,\n      0x33: storeBcd,\n      0x55: loadIV0ToVx,\n      0x65: loadV0ToVxI\n    }\n\n    // Fx07 - LD Vx, DT -> The value of DT is placed into Vx.\n    function loadDelayTimer () {\n      vRegisters[inst.x] = delayTimer\n    }\n\n    // Fx15 - LD DT, Vx -> DT is set equal to the value of Vx.\n    function setDelayTimer () {\n      delayTimer = vRegisters[inst.x]\n    }\n\n    // Fx1E - ADD I, Vx -> Set I = I + Vx.\n    function addIVx () {\n      const value = iRegister + vRegisters[inst.x]\n\n      if (value > 0xFFF) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      iRegister = value & 0xFFF\n    }\n\n    // Fx29 - LD F, Vx -> Set I = location of sprite for digit Vx.\n    function loadIVx () {\n      iRegister = vRegisters[inst.x] * 5\n    }\n\n    // Fx33 - LD B, Vx\n    // Store BCD representation of Vx in memory locations I, I+1, and I+2.\n    // The interpreter takes the decimal value of Vx, and places the hundreds digit in\n    // memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.\n    function storeBcd () {\n      const dec = vRegisters[inst.x]\n\n      // For a given value, say 234\n      memory[iRegister] = Math.floor(dec / 100) // Gives us 2\n      memory[iRegister + 1] = Math.floor(dec / 10) % 10 // Gives us 3\n      memory[iRegister + 2] = dec % 10 // Gives us 4\n    }\n\n    // Fx55 - LD [I], Vx -> V[0]...V[x] => memory[I]...memory[I + x]\n    function loadIV0ToVx () {\n      for (let i = 0; i <= inst.x; i += 1) {\n        memory[iRegister + i] = vRegisters[i]\n      }\n    }\n\n    // Fx65 - LD Vx, [I] -> The interpreter reads values from memory starting at location I into registers V0 through Vx.\n    function loadV0ToVxI () {\n      for (let i = 0; i <= inst.x; i += 1) {\n        vRegisters[i] = memory[iRegister + i]\n      }\n    }\n\n    // Fx0A - LD Vx, K\n    // Wait for a key press, store the value of the key in Vx.\n    // All execution stops until a key is pressed, then the value of that key is stored in Vx.\n    function waitForKeyPress () {\n      const keyPressed = keyboard.getAny()\n\n      if (!keyPressed) {\n        pc -= 2 // keep looping until a key is pressed\n\n        return\n      }\n\n      vRegisters[inst.x] = keyPressed\n\n      return keyPressed\n    }\n\n    // Fx18 - LD ST, Vx -> Set sound timer = Vx.\n    function setSoundTimer () {\n      soundTimer = vRegisters[inst.x]\n    }\n\n    return microOpCodes[inst.kk]()\n  }\n\n  function getDrawFlag () {\n    return drawFlag\n  }\n\n  return {\n    cycle,\n    getDrawFlag,\n    getDisplay,\n    setMemory,\n    reset\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/chip-8.js\n");

/***/ }),

/***/ "./src/keyboard.js":
/*!*************************!*\
  !*** ./src/keyboard.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst keyMap = {\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': 'q',\n  '5': 'w',\n  '6': 'e',\n  '7': 'a',\n  '8': 's',\n  '9': 'd',\n  'a': 'z',\n  '0': 'x',\n  'b': 'c',\n  'c': '4',\n  'd': 'r',\n  'e': 'f',\n  'f': 'v'\n}\n\nconst keys = {\n  '1': false,\n  '2': false,\n  '3': false,\n  'q': false,\n  'w': false,\n  'e': false,\n  'a': false,\n  's': false,\n  'd': false,\n  'z': false,\n  'x': false,\n  'c': false,\n  '4': false,\n  'r': false,\n  'f': false,\n  'v': false\n}\n\nfunction set (keyPress, value) {\n  keys[keyPress] = value\n}\n\nfunction get (hexKey) {\n  return keys[keyMap[hexKey.toString(16)]]\n}\n\nfunction getAny () {\n  return Object.values(keys).reduce((key, current, index) => {\n    const vmKey = Object.keys(keyMap)[index]\n    if (key) {\n      return key\n    } else if (current) {\n      return vmKey\n    }\n  }, null)\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  keyMap,\n  set,\n  get,\n  getAny\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMva2V5Ym9hcmQuanM/MThlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEMiLCJmaWxlIjoiLi9zcmMva2V5Ym9hcmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBrZXlNYXAgPSB7XG4gICcxJzogJzEnLFxuICAnMic6ICcyJyxcbiAgJzMnOiAnMycsXG4gICc0JzogJ3EnLFxuICAnNSc6ICd3JyxcbiAgJzYnOiAnZScsXG4gICc3JzogJ2EnLFxuICAnOCc6ICdzJyxcbiAgJzknOiAnZCcsXG4gICdhJzogJ3onLFxuICAnMCc6ICd4JyxcbiAgJ2InOiAnYycsXG4gICdjJzogJzQnLFxuICAnZCc6ICdyJyxcbiAgJ2UnOiAnZicsXG4gICdmJzogJ3YnXG59XG5cbmNvbnN0IGtleXMgPSB7XG4gICcxJzogZmFsc2UsXG4gICcyJzogZmFsc2UsXG4gICczJzogZmFsc2UsXG4gICdxJzogZmFsc2UsXG4gICd3JzogZmFsc2UsXG4gICdlJzogZmFsc2UsXG4gICdhJzogZmFsc2UsXG4gICdzJzogZmFsc2UsXG4gICdkJzogZmFsc2UsXG4gICd6JzogZmFsc2UsXG4gICd4JzogZmFsc2UsXG4gICdjJzogZmFsc2UsXG4gICc0JzogZmFsc2UsXG4gICdyJzogZmFsc2UsXG4gICdmJzogZmFsc2UsXG4gICd2JzogZmFsc2Vcbn1cblxuZnVuY3Rpb24gc2V0IChrZXlQcmVzcywgdmFsdWUpIHtcbiAga2V5c1trZXlQcmVzc10gPSB2YWx1ZVxufVxuXG5mdW5jdGlvbiBnZXQgKGhleEtleSkge1xuICByZXR1cm4ga2V5c1trZXlNYXBbaGV4S2V5LnRvU3RyaW5nKDE2KV1dXG59XG5cbmZ1bmN0aW9uIGdldEFueSAoKSB7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGtleXMpLnJlZHVjZSgoa2V5LCBjdXJyZW50LCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHZtS2V5ID0gT2JqZWN0LmtleXMoa2V5TWFwKVtpbmRleF1cbiAgICBpZiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5XG4gICAgfSBlbHNlIGlmIChjdXJyZW50KSB7XG4gICAgICByZXR1cm4gdm1LZXlcbiAgICB9XG4gIH0sIG51bGwpXG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAga2V5TWFwLFxuICBzZXQsXG4gIGdldCxcbiAgZ2V0QW55XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/keyboard.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chip_8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chip-8 */ \"./src/chip-8.js\");\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard */ \"./src/keyboard.js\");\n\n\n\nconst SCALE = 10\n\nlet game\n\nfunction loadMemory (file) {\n  const array = new Uint8Array(file)\n\n  chip8.setMemory(array, 0x200)\n\n  game = new Phaser.Game(config)\n}\n\nwindow.addEventListener('keydown', ({ key }) => {\n  if (Object.values(_keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"].keyMap).includes(key)) {\n    _keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(key, true)\n  }\n})\n\ndocument.querySelectorAll('.game-controls__button').forEach(el => el.addEventListener('mousedown', event => {\n  const key = event.target.innerHTML\n  if (Object.values(_keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"].keyMap).includes(key)) {\n    _keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(key, true)\n  }\n}))\n\nwindow.addEventListener('keyup', ({ key }) => {\n  _keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(key, false)\n})\n\ndocument.querySelectorAll('.game-controls__button').forEach(el => el.addEventListener('mouseup', event => {\n  const key = event.target.innerHTML\n  _keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(key, false)\n}))\n\nconst sound = new Audio('./sound.wav')\n\nconst chip8 = Object(_chip_8__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_keyboard__WEBPACK_IMPORTED_MODULE_1__[\"default\"], sound)\n\nfunction reset () {\n  if (game) {\n    game.canvas.remove()\n    game.scene.stop()\n    game.destroy()\n  }\n\n  chip8.reset()\n}\n\ndocument.getElementById('reset').addEventListener('click', _ => reset())\n\nfunction getGame (game) {\n  fetch(`./games/${game}`)\n    .then(response => response.blob())\n    .then(body => {\n      const reader = new FileReader()\n      reader.addEventListener(\"loadend\", _ => loadMemory(reader.result))\n      reader.readAsArrayBuffer(body)\n    })\n}\n\ndocument.getElementById('game-picker').addEventListener('change', event => {\n  reset()\n  getGame(event.target.value)\n}, false)\n\nconst Scene = new Phaser.Class({\n  Extends: Phaser.Scene,\n  initialize: function Scene () {\n    Phaser.Scene.call(this, { key: 'example' })\n  },\n  create: create,\n  applyPipeline: applyPipeline,\n  update: update\n})\n\nconst config = {\n  type: Phaser.AUTO,\n  width: 640,\n  height: 320,\n  parent: 'game',\n  scene: [ Scene ]\n}\n\nfunction create () {\n  const DISPLAY_WIDTH = chip8.getDisplay().length\n  const DISPLAY_HEIGHT = chip8.getDisplay()[0].length\n\n  const phaserDisplay = new Array(DISPLAY_WIDTH).fill().map(_ => new Array(DISPLAY_HEIGHT).fill(0))\n\n  for (let x = 0; x < phaserDisplay.length; x += 1) {\n    for (let y = 0; y < phaserDisplay[x].length; y += 1) {\n      phaserDisplay[x][y] = new Phaser.Geom.Rectangle(x * SCALE, y * SCALE, SCALE, SCALE)\n    }\n  }\n\n  this.phaserDisplay = phaserDisplay\n  this.graphics = this.add.graphics({ fillStyle: { color: 0xffffff }})\n  this.pipeline = this.game.renderer.addPipeline('Pipeline', new Pipeline(this.game))\n  this.applyPipeline()\n}\n\nfunction update (_, delta) {\n  const cpuSpeed = 1000 / 500 // 500Mhz\n  // cycle the CPU \"many\" times, depending on how long the draw loop took\n  const cycles = Math.floor(delta / cpuSpeed)\n  for (var i = 0; i < cycles; i += 1) {\n    chip8.cycle(delta)\n  }\n\n  if (chip8.getDrawFlag()) {\n    this.graphics.clear()  \n    const display = chip8.getDisplay()\n    for (var x = 0; x < display.length; x += 1) {\n      for (var y = 0; y < display[0].length; y += 1) {\n        const pixel = display[x][y]\n        this.graphics.fillStyle(pixel ? 0xffffff : 0x0)\n        const rect = this.phaserDisplay[x][y]\n        this.graphics.fillRectShape(rect)\n      }\n    }\n    chip8.drawFlag = false\n  }\n}\n\nfunction applyPipeline () {\n  this.cameras.main.setRenderToTexture(this.pipeline)\n}\n\nconst shader = `\n  precision mediump float;\n\n  uniform float time;\n  uniform vec2 resolution;\n  uniform sampler2D uMainSampler;\n\n  varying vec2 outTexCoord;\n\n  vec2 crt (vec2 coord) {\n    // lower == more curved\n    float straightness = 2.1;\n\n    // put in symmetrical coords\n    coord = coord - 0.5;\n\n    // shrink\n    coord *= 1.1;\t\n\n    // deform coords\n    coord.x *= 1.0 + pow(coord.y / (straightness + 0.5), 2.0);\n    coord.y *= 1.0 + pow(coord.x / straightness, 2.0);\n\n    // transform back to 0.0 - 1.0 space\n    coord  = coord + 0.5;\n\n    return coord;\n  }\n\n  void main () {\n    vec2 crtCoords = crt(outTexCoord);\n\n    if (crtCoords.x < 0.0 || crtCoords.x > 1.0 || crtCoords.y < 0.0 || crtCoords.y > 1.0) {\n      gl_FragColor.rgb = vec3(0.85, 0.85, 0.65);\n      return;\n    }\n\n    gl_FragColor = texture2D(uMainSampler, crtCoords);\n  }\n`\n\nconst Pipeline = new Phaser.Class({\n  Extends: Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline,\n  initialize: function Pipeline (game) {\n    Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline.call(this, {\n      game: game,\n      renderer: game.renderer,\n      fragShader: shader\n    })\n  }\n})//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUE0QjtBQUNLOztBQUVqQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEscUNBQXFDLE1BQU07QUFDM0Msb0JBQW9CLGlEQUFRO0FBQzVCLElBQUksaURBQVE7QUFDWjtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLG9CQUFvQixpREFBUTtBQUM1QixJQUFJLGlEQUFRO0FBQ1o7QUFDQSxDQUFDOztBQUVELG1DQUFtQyxNQUFNO0FBQ3pDLEVBQUUsaURBQVE7QUFDVixDQUFDOztBQUVEO0FBQ0E7QUFDQSxFQUFFLGlEQUFRO0FBQ1YsQ0FBQzs7QUFFRDs7QUFFQSxjQUFjLHVEQUFLLENBQUMsaURBQVE7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsbUJBQW1CLEtBQUs7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixpQkFBaUI7QUFDOUMsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlCQUFpQiwwQkFBMEI7QUFDM0MsbUJBQW1CLDZCQUE2QjtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsYUFBYSxtQkFBbUI7QUFDckU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFlBQVk7QUFDN0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDLHFCQUFxQix1QkFBdUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDIiwiZmlsZSI6Ii4vc3JjL21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hpcDggZnJvbSAnLi9jaGlwLTgnXG5pbXBvcnQga2V5Ym9hcmQgZnJvbSAnLi9rZXlib2FyZCdcblxuY29uc3QgU0NBTEUgPSAxMFxuXG5sZXQgZ2FtZVxuXG5mdW5jdGlvbiBsb2FkTWVtb3J5IChmaWxlKSB7XG4gIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZmlsZSlcblxuICBjaGlwOC5zZXRNZW1vcnkoYXJyYXksIDB4MjAwKVxuXG4gIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoY29uZmlnKVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsICh7IGtleSB9KSA9PiB7XG4gIGlmIChPYmplY3QudmFsdWVzKGtleWJvYXJkLmtleU1hcCkuaW5jbHVkZXMoa2V5KSkge1xuICAgIGtleWJvYXJkLnNldChrZXksIHRydWUpXG4gIH1cbn0pXG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5nYW1lLWNvbnRyb2xzX19idXR0b24nKS5mb3JFYWNoKGVsID0+IGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50ID0+IHtcbiAgY29uc3Qga2V5ID0gZXZlbnQudGFyZ2V0LmlubmVySFRNTFxuICBpZiAoT2JqZWN0LnZhbHVlcyhrZXlib2FyZC5rZXlNYXApLmluY2x1ZGVzKGtleSkpIHtcbiAgICBrZXlib2FyZC5zZXQoa2V5LCB0cnVlKVxuICB9XG59KSlcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKHsga2V5IH0pID0+IHtcbiAga2V5Ym9hcmQuc2V0KGtleSwgZmFsc2UpXG59KVxuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZ2FtZS1jb250cm9sc19fYnV0dG9uJykuZm9yRWFjaChlbCA9PiBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZXZlbnQgPT4ge1xuICBjb25zdCBrZXkgPSBldmVudC50YXJnZXQuaW5uZXJIVE1MXG4gIGtleWJvYXJkLnNldChrZXksIGZhbHNlKVxufSkpXG5cbmNvbnN0IHNvdW5kID0gbmV3IEF1ZGlvKCcuL3NvdW5kLndhdicpXG5cbmNvbnN0IGNoaXA4ID0gQ2hpcDgoa2V5Ym9hcmQsIHNvdW5kKVxuXG5mdW5jdGlvbiByZXNldCAoKSB7XG4gIGlmIChnYW1lKSB7XG4gICAgZ2FtZS5jYW52YXMucmVtb3ZlKClcbiAgICBnYW1lLnNjZW5lLnN0b3AoKVxuICAgIGdhbWUuZGVzdHJveSgpXG4gIH1cblxuICBjaGlwOC5yZXNldCgpXG59XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNldCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgXyA9PiByZXNldCgpKVxuXG5mdW5jdGlvbiBnZXRHYW1lIChnYW1lKSB7XG4gIGZldGNoKGAuL2dhbWVzLyR7Z2FtZX1gKVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmJsb2IoKSlcbiAgICAudGhlbihib2R5ID0+IHtcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVuZFwiLCBfID0+IGxvYWRNZW1vcnkocmVhZGVyLnJlc3VsdCkpXG4gICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYm9keSlcbiAgICB9KVxufVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1waWNrZXInKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldmVudCA9PiB7XG4gIHJlc2V0KClcbiAgZ2V0R2FtZShldmVudC50YXJnZXQudmFsdWUpXG59LCBmYWxzZSlcblxuY29uc3QgU2NlbmUgPSBuZXcgUGhhc2VyLkNsYXNzKHtcbiAgRXh0ZW5kczogUGhhc2VyLlNjZW5lLFxuICBpbml0aWFsaXplOiBmdW5jdGlvbiBTY2VuZSAoKSB7XG4gICAgUGhhc2VyLlNjZW5lLmNhbGwodGhpcywgeyBrZXk6ICdleGFtcGxlJyB9KVxuICB9LFxuICBjcmVhdGU6IGNyZWF0ZSxcbiAgYXBwbHlQaXBlbGluZTogYXBwbHlQaXBlbGluZSxcbiAgdXBkYXRlOiB1cGRhdGVcbn0pXG5cbmNvbnN0IGNvbmZpZyA9IHtcbiAgdHlwZTogUGhhc2VyLkFVVE8sXG4gIHdpZHRoOiA2NDAsXG4gIGhlaWdodDogMzIwLFxuICBwYXJlbnQ6ICdnYW1lJyxcbiAgc2NlbmU6IFsgU2NlbmUgXVxufVxuXG5mdW5jdGlvbiBjcmVhdGUgKCkge1xuICBjb25zdCBESVNQTEFZX1dJRFRIID0gY2hpcDguZ2V0RGlzcGxheSgpLmxlbmd0aFxuICBjb25zdCBESVNQTEFZX0hFSUdIVCA9IGNoaXA4LmdldERpc3BsYXkoKVswXS5sZW5ndGhcblxuICBjb25zdCBwaGFzZXJEaXNwbGF5ID0gbmV3IEFycmF5KERJU1BMQVlfV0lEVEgpLmZpbGwoKS5tYXAoXyA9PiBuZXcgQXJyYXkoRElTUExBWV9IRUlHSFQpLmZpbGwoMCkpXG5cbiAgZm9yIChsZXQgeCA9IDA7IHggPCBwaGFzZXJEaXNwbGF5Lmxlbmd0aDsgeCArPSAxKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBwaGFzZXJEaXNwbGF5W3hdLmxlbmd0aDsgeSArPSAxKSB7XG4gICAgICBwaGFzZXJEaXNwbGF5W3hdW3ldID0gbmV3IFBoYXNlci5HZW9tLlJlY3RhbmdsZSh4ICogU0NBTEUsIHkgKiBTQ0FMRSwgU0NBTEUsIFNDQUxFKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMucGhhc2VyRGlzcGxheSA9IHBoYXNlckRpc3BsYXlcbiAgdGhpcy5ncmFwaGljcyA9IHRoaXMuYWRkLmdyYXBoaWNzKHsgZmlsbFN0eWxlOiB7IGNvbG9yOiAweGZmZmZmZiB9fSlcbiAgdGhpcy5waXBlbGluZSA9IHRoaXMuZ2FtZS5yZW5kZXJlci5hZGRQaXBlbGluZSgnUGlwZWxpbmUnLCBuZXcgUGlwZWxpbmUodGhpcy5nYW1lKSlcbiAgdGhpcy5hcHBseVBpcGVsaW5lKClcbn1cblxuZnVuY3Rpb24gdXBkYXRlIChfLCBkZWx0YSkge1xuICBjb25zdCBjcHVTcGVlZCA9IDEwMDAgLyA1MDAgLy8gNTAwTWh6XG4gIC8vIGN5Y2xlIHRoZSBDUFUgXCJtYW55XCIgdGltZXMsIGRlcGVuZGluZyBvbiBob3cgbG9uZyB0aGUgZHJhdyBsb29wIHRvb2tcbiAgY29uc3QgY3ljbGVzID0gTWF0aC5mbG9vcihkZWx0YSAvIGNwdVNwZWVkKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGN5Y2xlczsgaSArPSAxKSB7XG4gICAgY2hpcDguY3ljbGUoZGVsdGEpXG4gIH1cblxuICBpZiAoY2hpcDguZ2V0RHJhd0ZsYWcoKSkge1xuICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKSAgXG4gICAgY29uc3QgZGlzcGxheSA9IGNoaXA4LmdldERpc3BsYXkoKVxuICAgIGZvciAodmFyIHggPSAwOyB4IDwgZGlzcGxheS5sZW5ndGg7IHggKz0gMSkge1xuICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCBkaXNwbGF5WzBdLmxlbmd0aDsgeSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHBpeGVsID0gZGlzcGxheVt4XVt5XVxuICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGxTdHlsZShwaXhlbCA/IDB4ZmZmZmZmIDogMHgwKVxuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5waGFzZXJEaXNwbGF5W3hdW3ldXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZmlsbFJlY3RTaGFwZShyZWN0KVxuICAgICAgfVxuICAgIH1cbiAgICBjaGlwOC5kcmF3RmxhZyA9IGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlQaXBlbGluZSAoKSB7XG4gIHRoaXMuY2FtZXJhcy5tYWluLnNldFJlbmRlclRvVGV4dHVyZSh0aGlzLnBpcGVsaW5lKVxufVxuXG5jb25zdCBzaGFkZXIgPSBgXG4gIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXG4gIHVuaWZvcm0gZmxvYXQgdGltZTtcbiAgdW5pZm9ybSB2ZWMyIHJlc29sdXRpb247XG4gIHVuaWZvcm0gc2FtcGxlcjJEIHVNYWluU2FtcGxlcjtcblxuICB2YXJ5aW5nIHZlYzIgb3V0VGV4Q29vcmQ7XG5cbiAgdmVjMiBjcnQgKHZlYzIgY29vcmQpIHtcbiAgICAvLyBsb3dlciA9PSBtb3JlIGN1cnZlZFxuICAgIGZsb2F0IHN0cmFpZ2h0bmVzcyA9IDIuMTtcblxuICAgIC8vIHB1dCBpbiBzeW1tZXRyaWNhbCBjb29yZHNcbiAgICBjb29yZCA9IGNvb3JkIC0gMC41O1xuXG4gICAgLy8gc2hyaW5rXG4gICAgY29vcmQgKj0gMS4xO1x0XG5cbiAgICAvLyBkZWZvcm0gY29vcmRzXG4gICAgY29vcmQueCAqPSAxLjAgKyBwb3coY29vcmQueSAvIChzdHJhaWdodG5lc3MgKyAwLjUpLCAyLjApO1xuICAgIGNvb3JkLnkgKj0gMS4wICsgcG93KGNvb3JkLnggLyBzdHJhaWdodG5lc3MsIDIuMCk7XG5cbiAgICAvLyB0cmFuc2Zvcm0gYmFjayB0byAwLjAgLSAxLjAgc3BhY2VcbiAgICBjb29yZCAgPSBjb29yZCArIDAuNTtcblxuICAgIHJldHVybiBjb29yZDtcbiAgfVxuXG4gIHZvaWQgbWFpbiAoKSB7XG4gICAgdmVjMiBjcnRDb29yZHMgPSBjcnQob3V0VGV4Q29vcmQpO1xuXG4gICAgaWYgKGNydENvb3Jkcy54IDwgMC4wIHx8IGNydENvb3Jkcy54ID4gMS4wIHx8IGNydENvb3Jkcy55IDwgMC4wIHx8IGNydENvb3Jkcy55ID4gMS4wKSB7XG4gICAgICBnbF9GcmFnQ29sb3IucmdiID0gdmVjMygwLjg1LCAwLjg1LCAwLjY1KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodU1haW5TYW1wbGVyLCBjcnRDb29yZHMpO1xuICB9XG5gXG5cbmNvbnN0IFBpcGVsaW5lID0gbmV3IFBoYXNlci5DbGFzcyh7XG4gIEV4dGVuZHM6IFBoYXNlci5SZW5kZXJlci5XZWJHTC5QaXBlbGluZXMuVGV4dHVyZVRpbnRQaXBlbGluZSxcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gUGlwZWxpbmUgKGdhbWUpIHtcbiAgICBQaGFzZXIuUmVuZGVyZXIuV2ViR0wuUGlwZWxpbmVzLlRleHR1cmVUaW50UGlwZWxpbmUuY2FsbCh0aGlzLCB7XG4gICAgICBnYW1lOiBnYW1lLFxuICAgICAgcmVuZGVyZXI6IGdhbWUucmVuZGVyZXIsXG4gICAgICBmcmFnU2hhZGVyOiBzaGFkZXJcbiAgICB9KVxuICB9XG59KSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ })

/******/ });