/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/chip-8.js":
/*!***********************!*\
  !*** ./src/chip-8.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// Made with a loooot of help from this excellent resource: http://devernay.free.fr/hacks/chip8/C8TECH10.HTM\n/* harmony default export */ __webpack_exports__[\"default\"] = ((keyboard, render, sound) => {\n  // CHIP-8 Interpreter\n  const WORD_SIZE = 8\n\n  // It has 16 8-bit data registers. V[0xF] is the carry register.\n  let vRegisters = new Uint8Array(16)\n\n  // It was originally designed to work on 4k computers, so lets give ourselves 4k of memory\n  // 0x0 -> 0x1FF is used to store the system font (it was originally used to store the interpreter data, back when it\n  // was ran on 4k systems)\n  // 0x200 -> 0xFFF is used to store the program data\n  let memory = new Uint8Array(4096)\n\n  // Copied from CowGood's font set\n  const fonts = [\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80 // F\n  ]\n\n  memory.set(fonts, 0)\n\n  // There are 2 timers, a delay timer and a sound timer, both decrease to 0 at a rate of 60Hz,\n  // once at 0 they stay there\n  let delayTimer = 0\n\n  // When the sound timer hits 0, a monotone sound is played.\n  let soundTimer = 0\n\n  // And of course a (16-bit) program counter, starting at... 0x200 (where the program is loaded in!)\n  let pc = 0x200\n\n  // It also has a 16-bit register, usually used for addressing memory\n  let iRegister = pc\n\n  // A stack pointer, allows us to have function calls.\n  let sp = 0\n\n  // The stack. Documentation says it's 16 deep, but apparently only 10 are ever used?\n  let stack = new Array(16)\n\n  // It utilises a 64x32 pixel display... we will get the chip-8 to write to these values, and in our `emulator` code,\n  // we will write these values to a screen. Simple! (should be!).\n  const DISPLAY_WIDTH = 64\n  const DISPLAY_HEIGHT = 32\n  let display = new Array(DISPLAY_WIDTH).fill().map(_ => new Array(DISPLAY_HEIGHT).fill(0))\n\n  let drawFlag = true\n  let animationFrame\n\n  function setMemory (file, start) {\n    memory.set(file, start)\n  }\n\n  function getDisplay () {\n    return display\n  }\n\n  function start () {\n    console.log('Starting...')\n    let lastTimeUpdated = Date.now()\n    const cpuSpeed = 1000 / 500 // 500Mhz\n    animationFrame = window.requestAnimationFrame(function loop () {\n      // cycle the CPU \"many\" times, depending on how long the draw loop took\n      const now = Date.now()\n      const diff = now - lastTimeUpdated\n      const cycles = Math.floor(diff / cpuSpeed)\n      for (var i = 0; i < cycles; i += 1) {\n        cycle()\n      }\n\n      if (drawFlag) {\n        render()\n        drawFlag = false\n      }\n\n      lastTimeUpdated = now\n\n      animationFrame = window.requestAnimationFrame(loop)\n    })\n  }\n\n  function reset () {\n    window.cancelAnimationFrame(animationFrame)\n    memory = new Uint8Array(4096)\n    vRegisters = new Uint8Array(16)\n    memory.set(fonts, 0)\n    display = new Array(DISPLAY_WIDTH).fill().map(_ => new Array(DISPLAY_HEIGHT).fill(0))\n    pc = 0x200\n    stack = new Array(16)\n    drawFlag = true\n    delayTimer = 0\n    soundTimer = 0\n    iRegister = pc\n  }\n\n  // does a cpu cycle innit.\n  let lastTimeDecremented = 0\n  function cycle () {\n    const currentTime = Date.now()\n    const dT = currentTime - lastTimeDecremented\n    const timerRefreshRate = 1000 / 60\n    if (dT >= timerRefreshRate) {\n      // decrement delayTimer at a rate of 60Hz\n      if (delayTimer > 0) {\n        delayTimer -= 1\n      }\n\n      if (soundTimer > 0) {\n        soundTimer -= 1\n        if (soundTimer === 0) {\n          sound.play()\n        }\n      }\n\n      lastTimeDecremented = currentTime\n    }\n\n    const inst = fetch()\n\n    // decode & execute (i'm too lazy to have them do separately, feels like a waste? We'll see...)\n    decodeAndExecute(inst)\n  }\n\n  // fetching from memory takes twoooo cycles, cos it's an 8-bit bus,\n  // but each instruction is 16-bits long.\n  function fetch () {\n    const inst = (memory[pc] << 8) | memory[pc + 1]\n    pc += 2\n\n    return inst\n  }\n\n  // aight we got a hex value now we need to look up what that means exactly\n  function decodeAndExecute (inst) {\n    // Many of the instructions follow the structure below, so to make my life simpler, I will calculate these values\n    // from the instruction We are using bitmasking to get these values. If you don't quite get what's happening here,\n    // look up https://en.wikipedia.org/wiki/Mask_(computing)\n\n    const nnn = inst & 0x0FFF // nnn or addr - A 12-bit value, the lowest 12 bits of the instruction\n    const n = inst & 0x000F // n or nibble - A 4-bit value, the lowest 4 bits of the instruction\n    const x = (inst & 0x0F00) >> 8 // x - A 4-bit value, the lower 4 bits of the high byte of the instructionction\n    const y = (inst & 0x00F0) >> 4// y - A 4-bit value, the upper 4 bits of the low byte of the instru\n    const kk = inst & 0x00FF // kk or byte - An 8-bit value, the lowest 8 bits of the instruction\n\n    // gonna split this into 'macro level opcodes' and 'micro level opcodes', as the instructions can be indexed by the\n    // highest byte first, and then after that we can decide what to do...\n    const highByte = inst & 0xF000\n    // We... could use a switch statement here, but that would be insane, right? How about a map instead?\n    const macroOpcodes = {\n      0x0000: clearAndReturnOpcodes,\n      0x1000: jump,\n      0x2000: callSubroutine,\n      0x3000: skipIfVxkk,\n      0x4000: skipIfNotVxkk,\n      0x5000: skipIfVxVy,\n      0x6000: loadVxVal,\n      0x7000: addVxVal,\n      0x8000: settingFuncs,\n      0x9000: skipIfNotVxVy,\n      0xA000: loadIAddr,\n      0xB000: jumpV0Offset,\n      0xC000: setVxRandom,\n      0xD000: draw,\n      0xE000: skipKey,\n      0xF000: registerManipulation\n    }\n\n    const macroOpcode = macroOpcodes[highByte]\n\n    macroOpcode({ nnn, n, x, y, kk }) // Yes, very ineffecient right now\n  }\n\n  // 0x0000\n  function clearAndReturnOpcodes (inst) {\n    // is the last bit set? if it is, it's the 'RET' function, otherwise it's the 'CLS' function\n    if (inst.nnn & 0x00F) {\n      returnFromSub() // 0x00EE\n    } else {\n      clearScreen() // 0x00E0\n    }\n\n    // 00E0 - CLS -> Clear the screen\n    function clearScreen () {\n      for (var x = 0; x < display.length; x += 1) {\n        for (var y = 0; y < display[x].length; y += 1) {\n          display[x][y] = 0\n        }\n      }\n    }\n\n    // 00EE - RET\n    // The interpreter sets the program counter to the address at the top of the stack, then subtracts 1 from the stack\n    // pointer. We're doing it the other way around (subtract, THEN set), because otherwise our 'stack's' (which is an\n    // array) first element is never set (stack[0] will never be used)\n    function returnFromSub () {\n      sp -= 1\n      pc = stack[sp]\n    }\n  }\n\n  // 1nnn - JP addr -> Sets pc to nnn\n  function jump (inst) {\n    pc = inst.nnn\n  }\n\n  // 2nnn - CALL addr\n  // Call subroutine at nnn.\n  // The interpreter increments the stack pointer, then puts the current PC on the top of the stack. The PC is then set\n  // to nnn. We're doing this the other way around (set, then increment), see 00EE for more info.\n  function callSubroutine (inst) {\n    stack[sp] = pc\n    sp += 1\n    pc = inst.nnn\n  }\n\n  // 3xkk - SE Vx, byte -> The interpreter compares register Vx to kk, and if they are equal, increments pc by 2.\n  function skipIfVxkk (inst) { // 5xy0 - SE Vx, Vy\n    if (vRegisters[inst.x] === inst.kk) {\n      pc += 2\n    }\n  }\n\n  // 4xkk - SNE Vx, byte\n  // Skip next instruction if Vx != kk.\n  // The interpreter compares register Vx to kk, and if they are not equal, increments the program counter by 2.\n  function skipIfNotVxkk (inst) {\n    if (vRegisters[inst.x] !== inst.kk) {\n      pc += 2\n    }\n  }\n\n  // 5xy0 - SE Vx, Vy\n  // Skip next instruction if Vx = Vy.\n  // The interpreter compares register Vx to register Vy, and if they are equal, increments the program counter by 2.\n  function skipIfVxVy (inst) {\n    if (vRegisters[inst.x] === vRegisters[inst.y]) {\n      pc += 2\n    }\n  }\n\n  // 6xkk - LD Vx, byte\n  // Set Vx = kk.\n  // The interpreter puts the value kk into register Vx.\n  function loadVxVal (inst) {\n    vRegisters[inst.x] = inst.kk\n  }\n\n  // 0x7000\n  // Set Vx = Vx + kk.\n  // Adds the value kk to the value of register Vx, then stores the result in Vx.\n  function addVxVal (inst) {\n    vRegisters[inst.x] = vRegisters[inst.x] + inst.kk\n  }\n\n  // 0x8000\n  function settingFuncs (inst) {\n    const microOpCodes = {\n      0x0: loadVxVy,\n      0x1: vXOrVy,\n      0x3: VxXorVy,\n      0x2: vXAndVy,\n      0x4: vXAddVy,\n      0x5: vXSubVy,\n      0x6: shiftRight,\n      0x7: vYSubVx,\n      0xE: shiftLeft\n    }\n\n    // 8xy0 - LD Vx, Vy -> Vx = Vy\n    function loadVxVy () {\n      vRegisters[inst.x] = vRegisters[inst.y]\n    }\n\n    // 8xy1 - OR Vx, Vy -> Vx = Vx | Vy\n    function vXOrVy () {\n      vRegisters[inst.x] = vRegisters[inst.x] | vRegisters[inst.y]\n    }\n\n    // 8xy2 - AND Vx, Vy -> Vx = Vx & Vy\n    function vXAndVy () {\n      vRegisters[inst.x] = vRegisters[inst.x] & vRegisters[inst.y]\n    }\n\n    // 8xy3 - XOR Vx, Vy -> Set Vx = Vx XOR Vy.\n    function VxXorVy () {\n      vRegisters[inst.x] = vRegisters[inst.x] ^ vRegisters[inst.y]\n    }\n\n    // 8xy4 - ADD Vx, Vy -> Vx = Vx + Vy -> Vx = Vx + Vy, set VF = carry.\n    function vXAddVy () {\n      const result = vRegisters[inst.x] + vRegisters[inst.y]\n\n      if (result > 0xFF) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = result & 0xFF\n    }\n\n    // 8xy5 - SUB Vx, Vy\n    // Set Vx = Vx - Vy, set VF = NOT borrow.\n    // If Vx > Vy, then VF is set to 1, otherwise 0. Then Vy is subtracted from Vx, and the results stored in Vx.\n    function vXSubVy () {\n      if (vRegisters[inst.x] > vRegisters[inst.y]) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = (vRegisters[inst.x] - vRegisters[inst.y]) & 0xFF\n    }\n\n    // 8xy6 - SHR Vx {, Vy} -> V[0xF] = Vx & 0x1. Set Vx = Vx >> 1\n    function shiftRight () {\n      vRegisters[0xF] = vRegisters[inst.x] & 0b1\n      vRegisters[inst.x] = vRegisters[inst.x] >> 1\n    }\n\n    // 8xy7 - SUBN Vx, Vy -> Set Vx = Vy - Vx, set VF = NOT borrow.\n    function vYSubVx () {\n      if (vRegisters[inst.y] > vRegisters[inst.x]) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = vRegisters[inst.y] - vRegisters[inst.x]\n    }\n\n    // 8xyE - SHL Vx {, Vy} -> V[0xF] = 1 if Vx >= 0x80, else 0. Then Vx = Vx << 1.\n    function shiftLeft () {\n      if (vRegisters[inst.x] & 0b10000000) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      vRegisters[inst.x] = vRegisters[inst.x] << 1\n    }\n\n    if (!microOpCodes[inst.n]) {\n      console.error(`Missing instruction: ${inst.n.toString(16)}`)\n    }\n\n    microOpCodes[inst.n]()\n  }\n\n  // 9xy0 - SNE Vx, Vy -> Skip next instruction if Vx != Vy.\n  function skipIfNotVxVy (inst) {\n    if (vRegisters[inst.x] !== vRegisters[inst.y]) {\n      pc += 2\n    }\n  }\n\n  // 0xA000 -> i = nnn\n  function loadIAddr (inst) {\n    iRegister = inst.nnn\n  }\n\n  // Bnnn - JP V0, addr -> pc = nnn + V0.\n  function jumpV0Offset (inst) {\n    pc = inst.nnn + vRegisters[0]\n  }\n\n  // Cxkk - RND Vx, byte -> Set Vx = random byte AND kk.\n  function setVxRandom (inst) {\n    const random = Math.floor(Math.random(1) * 255)\n    vRegisters[inst.x] = random & inst.kk\n  }\n\n  // Dxyn - DRW Vx, Vy, nibble\n  // Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision.\n  // The interpreter reads n bytes from memory, starting at the address stored in I.\n  // These bytes are then displayed as sprites on screen at coordinates (Vx, Vy).\n  // Sprites are XORed onto the existing screen.\n  // If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0.\n  // If the sprite is positioned so part of it is outside the coordinates of the display, i t wraps around to the\n  // opposite side of the screen.\n  function draw (inst) {\n    let x = vRegisters[inst.x]\n    let y = vRegisters[inst.y]\n    let iAddr = iRegister\n    vRegisters[0xF] = 0\n\n    for (var i = 0; i < inst.n; i += 1) {\n      const newY = (y + i) % DISPLAY_HEIGHT\n\n      const line = memory[iAddr]\n      iAddr += 1\n\n      for (var j = 0; j < WORD_SIZE; j += 1) {\n        const newX = (x + j) % DISPLAY_WIDTH\n\n        const bitmask = 0b00000001 << (WORD_SIZE - 1 - j)\n        const pixel = (line & bitmask) >> (WORD_SIZE - 1 - j)\n\n        const currentPixel = display[newX][newY]\n        const newPixel = currentPixel ^ pixel\n\n        display[newX][newY] = newPixel\n\n        if (currentPixel > newPixel) {\n          vRegisters[0xF] = 1\n        }\n      }\n    }\n\n    drawFlag = true\n  }\n\n  // 0xE000\n  function skipKey (inst) {\n    // Ex9E - SKP Vx -> Skip next instruction if key with the value of Vx is pressed.\n    if (inst.kk === 0x9E) {\n      const isKeyPressed = keyboard.get(vRegisters[inst.x])\n      if (isKeyPressed) {\n        pc += 2\n      }\n      return\n    }\n\n    // ExA1 - SKNP Vx\n    // Skip next instruction if key with the value of Vx is not pressed.\n    // Checks the keyboard, and if the key corresponding to the value of Vx is currently in the up position, PC is\n    // increased by 2.\n    if (inst.kk === 0xA1) {\n      const isKeyPressed = keyboard.get(vRegisters[inst.x])\n      if (!isKeyPressed) {\n        pc += 2\n      }\n    }\n  }\n\n  // 0xF000\n  function registerManipulation (inst) {\n    const microOpCodes = {\n      0x07: loadDelayTimer,\n      0x0A: waitForKeyPress,\n      0x15: setDelayTimer,\n      0x18: setSoundTimer,\n      0x1E: addIVx,\n      0x29: loadIVx,\n      0x33: storeBcd,\n      0x55: loadIV0ToVx,\n      0x65: loadV0ToVxI\n    }\n\n    // Fx07 - LD Vx, DT -> The value of DT is placed into Vx.\n    function loadDelayTimer () {\n      vRegisters[inst.x] = delayTimer\n    }\n\n    // Fx15 - LD DT, Vx -> DT is set equal to the value of Vx.\n    function setDelayTimer () {\n      delayTimer = vRegisters[inst.x]\n    }\n\n    // Fx1E - ADD I, Vx -> Set I = I + Vx.\n    function addIVx () {\n      const value = iRegister + vRegisters[inst.x]\n\n      if (value > 0xFFF) {\n        vRegisters[0xF] = 1\n      } else {\n        vRegisters[0xF] = 0\n      }\n\n      iRegister = value & 0xFFF\n    }\n\n    // Fx29 - LD F, Vx -> Set I = location of sprite for digit Vx.\n    function loadIVx () {\n      iRegister = vRegisters[inst.x] * 5\n    }\n\n    // Fx33 - LD B, Vx\n    // Store BCD representation of Vx in memory locations I, I+1, and I+2.\n    // The interpreter takes the decimal value of Vx, and places the hundreds digit in\n    // memory at location in I, the tens digit at location I+1, and the ones digit at location I+2.\n    function storeBcd () {\n      const dec = vRegisters[inst.x]\n\n      // For a given value, say 234\n      memory[iRegister] = Math.floor(dec / 100) // Gives us 2\n      memory[iRegister + 1] = Math.floor(dec / 10) % 10 // Gives us 3\n      memory[iRegister + 2] = dec % 10 // Gives us 4\n    }\n\n    // Fx55 - LD [I], Vx -> V[0]...V[x] => memory[I]...memory[I + x]\n    function loadIV0ToVx () {\n      for (let i = 0; i <= inst.x; i += 1) {\n        memory[iRegister + i] = vRegisters[i]\n      }\n    }\n\n    // Fx65 - LD Vx, [I] -> The interpreter reads values from memory starting at location I into registers V0 through Vx.\n    function loadV0ToVxI () {\n      for (let i = 0; i <= inst.x; i += 1) {\n        vRegisters[i] = memory[iRegister + i]\n      }\n    }\n\n    // Fx0A - LD Vx, K\n    // Wait for a key press, store the value of the key in Vx.\n    // All execution stops until a key is pressed, then the value of that key is stored in Vx.\n    function waitForKeyPress () {\n      const keyPressed = keyboard.getAny()\n\n      if (!keyPressed) {\n        pc -= 2 // keep looping until a key is pressed\n\n        return\n      }\n\n      vRegisters[inst.x] = keyPressed\n\n      return keyPressed\n    }\n\n    // Fx18 - LD ST, Vx -> Set sound timer = Vx.\n    function setSoundTimer () {\n      soundTimer = vRegisters[inst.x]\n    }\n\n    return microOpCodes[inst.kk]()\n  }\n\n  return {\n    getDisplay,\n    setMemory,\n    start,\n    reset\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/chip-8.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chip_8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chip-8 */ \"./src/chip-8.js\");\n\n\nconst SCALE = 10\n\nfunction loadMemory (file) {\n  console.log('loading memory')\n  const array = new Uint8Array(file)\n\n  chip8.setMemory(array, 0x200)\n\n  chip8.start()\n}\n\nconst canvas = document.createElement('canvas')\ncanvas.id = 'canvas'\ncanvas.width = 64 * SCALE\ncanvas.height = 32 * SCALE\ndocument.body.appendChild(canvas)\nconst context = canvas.getContext('2d')\n\nfunction render () {\n  const display = chip8.getDisplay()\n\n  for (var x = 0; x < display.length; x += 1) {\n    for (var y = 0; y < display[0].length; y += 1) {\n      const pixel = display[x][y]\n      context.fillStyle = pixel ? '#fff' : '#000'\n      context.fillRect(x * SCALE, y * SCALE, SCALE, SCALE)\n    }\n  }\n}\n\nfunction readSingleFile (event) {\n  const canvas = document.getElementById('canvas')\n  const context = canvas.getContext('2d')\n  context.fillRect(0, 0, 640, 320, '#000')\n\n  var filename = event.target.files[0]\n\n  if (!filename) return\n\n  const reader = new FileReader()\n  reader.onload = file => loadMemory(file.target.result)\n  reader.readAsArrayBuffer(filename)\n}\n\nlet keyboard = (function () {\n  const keyMap = {\n    '1': '1',\n    '2': '2',\n    '3': '3',\n    '4': 'q',\n    '5': 'w',\n    '6': 'e',\n    '7': 'a',\n    '8': 's',\n    '9': 'd',\n    'a': 'z',\n    '0': 'x',\n    'b': 'c',\n    'c': '4',\n    'd': 'r',\n    'e': 'f',\n    'f': 'v'\n  }\n\n  const keys = {\n    '1': false,\n    '2': false,\n    '3': false,\n    'q': false,\n    'w': false,\n    'e': false,\n    'a': false,\n    's': false,\n    'd': false,\n    'z': false,\n    'x': false,\n    'c': false,\n    '4': false,\n    'r': false,\n    'f': false,\n    'v': false\n  }\n\n  function set (keyPress, value) {\n    keys[keyPress] = value\n  }\n\n  function get (hexKey) {\n    return keys[keyMap[hexKey.toString(16)]]\n  }\n\n  function getAny () {\n    return Object.values(keys).reduce((key, current, index) => {\n      const vmKey = Object.keys(keyMap)[index]\n      if (key) {\n        return key\n      } else if (current) {\n        return vmKey\n      }\n    }, null)\n  }\n\n  return {\n    keyMap,\n    set,\n    get,\n    getAny\n  }\n})()\n\nconst sound = new Audio('./sound.wav')\nconst chip8 = Object(_chip_8__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(keyboard, render, sound)\n\nwindow.addEventListener('keydown', ({ key }) => {\n  if (key === 'm') {\n    sound.play()\n  }\n\n  if (Object.values(keyboard.keyMap).includes(key)) {\n    keyboard.set(key, true)\n  }\n})\n\nwindow.addEventListener('keyup', ({ key }) => {\n  keyboard.set(key, false)\n})\n\ndocument.getElementById('reset').addEventListener('click', _ => {\n  chip8.reset()\n})\n\ndocument.getElementById('game-picker').addEventListener('change', event => {\n  chip8.reset()\n  getGame(event.target.value)\n}, false)\n\nfunction getGame (game) {\n  fetch(`./games/${game}`)\n    .then(response => response.blob())\n    .then(body => {\n      const reader = new FileReader()\n      reader.addEventListener(\"loadend\", _ => loadMemory(reader.result))\n      reader.readAsArrayBuffer(body)\n    })\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBNEI7O0FBRTVCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixvQkFBb0I7QUFDckMsbUJBQW1CLHVCQUF1QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSxjQUFjLHVEQUFLOztBQUVuQixxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxtQ0FBbUMsTUFBTTtBQUN6QztBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJmaWxlIjoiLi9zcmMvbWFpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDaGlwOCBmcm9tICcuL2NoaXAtOCdcblxuY29uc3QgU0NBTEUgPSAxMFxuXG5mdW5jdGlvbiBsb2FkTWVtb3J5IChmaWxlKSB7XG4gIGNvbnNvbGUubG9nKCdsb2FkaW5nIG1lbW9yeScpXG4gIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZmlsZSlcblxuICBjaGlwOC5zZXRNZW1vcnkoYXJyYXksIDB4MjAwKVxuXG4gIGNoaXA4LnN0YXJ0KClcbn1cblxuY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbmNhbnZhcy5pZCA9ICdjYW52YXMnXG5jYW52YXMud2lkdGggPSA2NCAqIFNDQUxFXG5jYW52YXMuaGVpZ2h0ID0gMzIgKiBTQ0FMRVxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpXG5jb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcblxuZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgY29uc3QgZGlzcGxheSA9IGNoaXA4LmdldERpc3BsYXkoKVxuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgZGlzcGxheS5sZW5ndGg7IHggKz0gMSkge1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgZGlzcGxheVswXS5sZW5ndGg7IHkgKz0gMSkge1xuICAgICAgY29uc3QgcGl4ZWwgPSBkaXNwbGF5W3hdW3ldXG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHBpeGVsID8gJyNmZmYnIDogJyMwMDAnXG4gICAgICBjb250ZXh0LmZpbGxSZWN0KHggKiBTQ0FMRSwgeSAqIFNDQUxFLCBTQ0FMRSwgU0NBTEUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRTaW5nbGVGaWxlIChldmVudCkge1xuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJylcbiAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgNjQwLCAzMjAsICcjMDAwJylcblxuICB2YXIgZmlsZW5hbWUgPSBldmVudC50YXJnZXQuZmlsZXNbMF1cblxuICBpZiAoIWZpbGVuYW1lKSByZXR1cm5cblxuICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHJlYWRlci5vbmxvYWQgPSBmaWxlID0+IGxvYWRNZW1vcnkoZmlsZS50YXJnZXQucmVzdWx0KVxuICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZW5hbWUpXG59XG5cbmxldCBrZXlib2FyZCA9IChmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGtleU1hcCA9IHtcbiAgICAnMSc6ICcxJyxcbiAgICAnMic6ICcyJyxcbiAgICAnMyc6ICczJyxcbiAgICAnNCc6ICdxJyxcbiAgICAnNSc6ICd3JyxcbiAgICAnNic6ICdlJyxcbiAgICAnNyc6ICdhJyxcbiAgICAnOCc6ICdzJyxcbiAgICAnOSc6ICdkJyxcbiAgICAnYSc6ICd6JyxcbiAgICAnMCc6ICd4JyxcbiAgICAnYic6ICdjJyxcbiAgICAnYyc6ICc0JyxcbiAgICAnZCc6ICdyJyxcbiAgICAnZSc6ICdmJyxcbiAgICAnZic6ICd2J1xuICB9XG5cbiAgY29uc3Qga2V5cyA9IHtcbiAgICAnMSc6IGZhbHNlLFxuICAgICcyJzogZmFsc2UsXG4gICAgJzMnOiBmYWxzZSxcbiAgICAncSc6IGZhbHNlLFxuICAgICd3JzogZmFsc2UsXG4gICAgJ2UnOiBmYWxzZSxcbiAgICAnYSc6IGZhbHNlLFxuICAgICdzJzogZmFsc2UsXG4gICAgJ2QnOiBmYWxzZSxcbiAgICAneic6IGZhbHNlLFxuICAgICd4JzogZmFsc2UsXG4gICAgJ2MnOiBmYWxzZSxcbiAgICAnNCc6IGZhbHNlLFxuICAgICdyJzogZmFsc2UsXG4gICAgJ2YnOiBmYWxzZSxcbiAgICAndic6IGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiBzZXQgKGtleVByZXNzLCB2YWx1ZSkge1xuICAgIGtleXNba2V5UHJlc3NdID0gdmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldCAoaGV4S2V5KSB7XG4gICAgcmV0dXJuIGtleXNba2V5TWFwW2hleEtleS50b1N0cmluZygxNildXVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QW55ICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhrZXlzKS5yZWR1Y2UoKGtleSwgY3VycmVudCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHZtS2V5ID0gT2JqZWN0LmtleXMoa2V5TWFwKVtpbmRleF1cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiB2bUtleVxuICAgICAgfVxuICAgIH0sIG51bGwpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGtleU1hcCxcbiAgICBzZXQsXG4gICAgZ2V0LFxuICAgIGdldEFueVxuICB9XG59KSgpXG5cbmNvbnN0IHNvdW5kID0gbmV3IEF1ZGlvKCcuL3NvdW5kLndhdicpXG5jb25zdCBjaGlwOCA9IENoaXA4KGtleWJvYXJkLCByZW5kZXIsIHNvdW5kKVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsICh7IGtleSB9KSA9PiB7XG4gIGlmIChrZXkgPT09ICdtJykge1xuICAgIHNvdW5kLnBsYXkoKVxuICB9XG5cbiAgaWYgKE9iamVjdC52YWx1ZXMoa2V5Ym9hcmQua2V5TWFwKS5pbmNsdWRlcyhrZXkpKSB7XG4gICAga2V5Ym9hcmQuc2V0KGtleSwgdHJ1ZSlcbiAgfVxufSlcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKHsga2V5IH0pID0+IHtcbiAga2V5Ym9hcmQuc2V0KGtleSwgZmFsc2UpXG59KVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzZXQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF8gPT4ge1xuICBjaGlwOC5yZXNldCgpXG59KVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1waWNrZXInKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldmVudCA9PiB7XG4gIGNoaXA4LnJlc2V0KClcbiAgZ2V0R2FtZShldmVudC50YXJnZXQudmFsdWUpXG59LCBmYWxzZSlcblxuZnVuY3Rpb24gZ2V0R2FtZSAoZ2FtZSkge1xuICBmZXRjaChgLi9nYW1lcy8ke2dhbWV9YClcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5ibG9iKCkpXG4gICAgLnRoZW4oYm9keSA9PiB7XG4gICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgXyA9PiBsb2FkTWVtb3J5KHJlYWRlci5yZXN1bHQpKVxuICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJvZHkpXG4gICAgfSlcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ })

/******/ });